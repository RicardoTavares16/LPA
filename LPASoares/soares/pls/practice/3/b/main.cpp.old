#include <iostream>
#include <cstdlib>

int **graph;
int *dfs, *low, *parent;
int vertexCount;
int edgeCount;
int dfsTimer;
int *artPoints;

int min(int a, int b) {
	return a < b ? a : b;
}

int articulationPoints(int v) {
	dfsTimer++;
	dfs[v] = dfsTimer;
	low[v] = dfsTimer;
	for(int k = 0; graph[v][k] != 0; k++) {
		int w = graph[v][k];
		if(dfs[w] == -1) {
			parent[w] = v;
			articulationPoints(w);
			low[v] = min(low[v], low[w]);
			if(dfs[v] == 1 && dfs[w] != 2) {
				for(k = 0; artPoints[k] != 0; k++) ;
				artPoints[k] = v;
			}
			if(dfs[v] != 1 && low[w] >= dfs[v]) {
				for(k = 0; artPoints[k] != 0; k++) ;
                artPoints[k] = v;
			}
		}
		else if (parent[w] != v) {
			low[v] = min(low[v], dfs[w]);
		}
	}
}

int main() {

	while(std::cin >> vertexCount >> edgeCount) {
		graph = (int**) malloc((vertexCount+1) * sizeof(int*));
		dfs = (int*) malloc((vertexCount+1) * sizeof(int));
		low = (int*) malloc((vertexCount+1) * sizeof(int));
		parent = (int*) malloc((vertexCount+1) * sizeof(int));
		artPoints = (int*) calloc((vertexCount+1), sizeof(int));
		for(int i = 1; i <= vertexCount; i++) {
			dfs[i] = -1;
			graph[i] = (int*) calloc((vertexCount+1),  sizeof(int));
		}
		for(int i = 0; i < edgeCount; i++) {
			int edgeEnd1, edgeEnd2, k;
			std::cin >> edgeEnd1 >> edgeEnd2;
			edgeEnd1++;
			edgeEnd2++;
			for(k = 0; graph[edgeEnd1][k] != 0; k++) ;
			graph[edgeEnd1][k] = edgeEnd2;
			for(k = 0; graph[edgeEnd2][k] != 0; k++) ;
            graph[edgeEnd2][k] = edgeEnd1;
		}

		dfsTimer = 0;
		articulationPoints(1);

		for(int k = 0; artPoints[k] != 0; k++) {

			for(int l = 0; graph[artPoints[k]][l] != 0; l++) {
				std::cout << "art point " << artPoints[k]-1 << " " << graph[artPoints[k]][l]-1 ;

				std::cout << " " << dfs[graph[artPoints[k]][l]] << " " << low[graph[artPoints[k]][l]] << std::endl;
			}

		}
		std::cout << std::endl;

		for(int i = 0; i < vertexCount+1; i++) {
            free(graph[i]);
        }
		free(parent);
		free(artPoints);
		free(graph);
		free(low);
		free(dfs);
	}
}
