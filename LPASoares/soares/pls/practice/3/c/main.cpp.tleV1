#include <iostream>
#include <cstdlib>
#include <vector>
#include <limits>
#include <algorithm>

bool **adjList;
bool *isVisited;
int vertexCount;
int shortValue;
int tallValue;
int maxDepth;
std::vector<int> shortest;
std::vector<int> tallest;

void dfs(int v, int depth) {
	isVisited[v] = true;
	maxDepth = depth > maxDepth ? depth : maxDepth;
	for(int i = 1; i <= vertexCount; i++) {
		if(adjList[v][i]) {
			if(!isVisited[i]) {
				dfs(i, depth + 1);
			}
		}
	}
}

int main() {
	std::cin >> vertexCount;
	adjList = (bool**) malloc((vertexCount+1) * sizeof(bool*));
	isVisited = (bool*) malloc((vertexCount+1) * sizeof(bool));
	for(int i = 0; i <= vertexCount; i++) {
		isVisited[i] = false;
		adjList[i] = (bool*) malloc((vertexCount+1) * sizeof(bool));
		for(int j = 0; j <= vertexCount; j++) {
			adjList[i][j] = false;
		}
	}
	for(int i = 1; i < vertexCount; i++) {
		int end1, end2;
		std::cin >> end1 >> end2;
		adjList[end1][end2] = true;
		adjList[end2][end1] = true;
	}

	shortValue = std::numeric_limits<int>::max();
	tallValue = 0;

	for(int i = 1; i <= vertexCount; i++) {
		maxDepth = 0;
		dfs(i, 0);
		for(int j = 1; j <= vertexCount + 1; j++) {
			isVisited[j] = false;
		}
		#ifdef DEBUG
		std::cout << "ROOT " << i << " - DEPTH " << maxDepth;
		std::cout << " TALL " << tallValue << " SHORT " << shortValue << std::endl; 
		#endif
		if(maxDepth == shortValue) {
			shortest.push_back(i);
		}
		if(maxDepth == tallValue) {
			tallest.push_back(i);
		}
		if(maxDepth < shortValue) {
			shortValue = maxDepth;
			shortest.clear();
			shortest.push_back(i);
		}
		if(maxDepth > tallValue) {
			tallValue = maxDepth;
			tallest.clear();
            tallest.push_back(i);

		}
	}

	std::sort(shortest.begin(), shortest.end());
	std::sort(tallest.begin(), tallest.end());

	std::cout << "Shortest: ";
	for(int i = 0; i < (int)shortest.size(); i++) {
		if(i == (int)shortest.size() - 1) std::cout << shortest[i] << std::endl;
		else std::cout << shortest[i] << " ";
	}
	std::cout << "Tallest: ";
    for(int i = 0; i < (int)tallest.size(); i++) {
        if(i == (int)tallest.size() - 1) std::cout << tallest[i] << std::endl;
        else std::cout << tallest[i] << " ";
    }

    for(int i = 0; i <= vertexCount; i++) {
       free(adjList[i]);
    }
	free(isVisited);
	free(adjList);
	return 0;
}
