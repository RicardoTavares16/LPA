#include <iostream>
#include <cstdlib>
#include <vector>
#include <limits>
#include <algorithm>

int **dist, vertexCount;
std::vector<int> shortest;
std::vector<int> tallest;

void floydWarshall(){
	for(int k = 1; k <= vertexCount; k++) {
		for(int i = 1; i <= vertexCount; i++) {
			for(int j = 1; j <= vertexCount; j++) {
				if (dist[i][j] > dist[i][k] + dist[k][j]) {
					dist[i][j] = dist[i][k] + dist[k][j];
				}
			}
		}
	}
}

void processMatrix(){
	int shortValue = std::numeric_limits<int>::max()/2;
	int tallValue = 0;
	for(int i = 1; i <= vertexCount; i++) {
		int maxDepth = 0;
		for(int j = 1; j <= vertexCount; j++) {
			maxDepth = dist[i][j] > maxDepth ? dist[i][j] : maxDepth;
		}
		if(maxDepth == shortValue) {
			shortest.push_back(i);
		}
		if(maxDepth == tallValue) {
			tallest.push_back(i);
		}
		if(maxDepth < shortValue) {
			shortValue = maxDepth;
			shortest.clear();
			shortest.push_back(i);
		}
		if(maxDepth > tallValue) {
			tallValue = maxDepth;
			tallest.clear();
			tallest.push_back(i);
		}
	}
}

int main() {
	std::cin >> vertexCount;
	dist = (int**) malloc((vertexCount + 1) * sizeof(int**));
	for(int i = 1; i <= vertexCount; i++) {
		dist[i] = (int*) malloc((vertexCount + 1) * sizeof(int));
		for(int j = 1; j <= vertexCount; j++) {
			dist[i][j] = std::numeric_limits<int>::max()/2;
		}
		dist[i][i] = 0;
	}

	for(int i = 1; i <= vertexCount; i++) {
		int end1, end2;
		std::cin >> end1 >> end2;
		dist[end1][end2] = 1;
		dist[end2][end1] = 1;
	}

	floydWarshall();
	processMatrix();

	std::sort(shortest.begin(), shortest.end());
	std::sort(tallest.begin(), tallest.end());

	std::cout << "Shortest: ";
	for(int i = 0; i < (int)shortest.size(); i++) {
		if(i == (int)shortest.size() - 1) std::cout << shortest[i] << std::endl;
		else std::cout << shortest[i] << " ";
	}
	std::cout << "Tallest: ";
	for(int i = 0; i < (int)tallest.size(); i++) {
		if(i == (int)tallest.size() - 1) std::cout << tallest[i] << std::endl;
		else std::cout << tallest[i] << " ";
	}

	#ifdef DEBUG
	for(int i = 1; i <= vertexCount; i++) {
		for(int j = 1; j <= vertexCount; j++) {
			std::cout << dist[i][j] << " ";
		}
		std::cout << std::endl;
	}
	#endif

	for(int i = 1; i <= vertexCount; i++) {
    	free(dist[i]);
   	}
   	free(dist);
	return 0;
}
